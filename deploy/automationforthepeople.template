{
"AWSTemplateFormatVersion": "2010-09-09",
    "Description": "The CloudFormation Stack for running the Automation for the People API.",
    "Parameters": {
        "S3Bucket": {
            "Type": "String",
            "Description": "The bucket used for storing the Lambda function for the Automation for the People API.",
            "Default": "automationforthepeoplepmartin"
        }
    },
    "Resources": {
        "LambdaCloudWatchLogsRole": {
           "Type": "AWS::IAM::Role",
           "Properties": {
              "AssumeRolePolicyDocument": {  
                    "Version" : "2012-10-17",
                    "Statement": [ {
                       "Effect": "Allow",
                       "Principal": {
                          "Service": [ "lambda.amazonaws.com" ]
                       },
                       "Action": [ "sts:AssumeRole" ]
                    } ]
              },
              "Policies": [ {
                "PolicyName": "LambdaLogsPolicy",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "logs:CreateLogGroup",
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource": [
                                "*"
                            ]
                        }
                    ]
                }
              }]
           }
        },
        "ApiGatewayCloudWatchLogsRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [{
                  "Effect": "Allow",
                  "Principal": { "Service": ["apigateway.amazonaws.com"] },
                  "Action": ["sts:AssumeRole"]
                }]
              },
              "Policies": [{
                "PolicyName": "ApiGatewayLogsPolicy",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [{
                    "Effect": "Allow",
                    "Action": [
                      "logs:CreateLogGroup",
                      "logs:CreateLogStream",
                      "logs:DescribeLogGroups",
                      "logs:DescribeLogStreams",
                      "logs:PutLogEvents",
                      "logs:GetLogEvents",
                      "logs:FilterLogEvents"
                    ],
                    "Resource": "*"
                  }]
                }
              }]
            }
        },
        "ApiGatewayAccount": {
            "Type": "AWS::ApiGateway::Account",
            "Properties": {
              "CloudWatchRoleArn": {"Fn::GetAtt": ["ApiGatewayCloudWatchLogsRole", "Arn"] }
            }
        },
        "ApiGatewayDeployment": {
            "Type": "AWS::ApiGateway::Deployment",
            "DependsOn": ["ApiGatewayRequest"],
            "Properties": {
              "RestApiId": {"Ref": "ApiGatewayRestApi"},
              "StageName": "temp"
            }
        },
        "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "AutomationForThePeople",
              "Description": "The REST API for the Automation for the People api endpoint.",
              "FailOnWarnings": true
            }
        },
        "ApiGatewayProdStage": {
            "DependsOn": ["ApiGatewayAccount"],
            "Type": "AWS::ApiGateway::Stage",
            "Properties": {
                "DeploymentId": {"Ref": "ApiGatewayDeployment"},
                "MethodSettings": [{
                    "DataTraceEnabled": true,
                    "HttpMethod": "*",
                    "LoggingLevel": "INFO",
                    "ResourcePath": "/*"
                }],
                "RestApiId": {"Ref": "ApiGatewayRestApi"},
                "StageName": "prod"
            }
        },
        "ApiGatewayResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "RestApiId": {"Ref": "ApiGatewayRestApi"},
                "ParentId": {"Fn::GetAtt": ["ApiGatewayRestApi", "RootResourceId"]},
                "PathPart": "api"
            }
        },
        "ApiGatewayRequest": {
            "DependsOn": "LambdaPermission",
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "GET",
              "Integration": {
                "Type": "AWS",
                "IntegrationHttpMethod": "POST",
                "Uri": {"Fn::Join": ["",
                  ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["LambdaFunction", "Arn"]}, "/invocations"]
                ]},
                "IntegrationResponses": [{
                  "StatusCode": 200
                }],
                "RequestTemplates": {
                  "application/json": {"Fn::Join": ["", [
                    "{",
                    "  \"name\": \"$input.params('name')\"",
                    "}"
                  ]]}
                }
              },
              "RequestParameters": {
                "method.request.querystring.name": false
              },
              "ResourceId": {"Ref": "ApiGatewayResource"},
              "RestApiId": {"Ref": "ApiGatewayRestApi"},
              "MethodResponses": [{
                "StatusCode": 200
              }]
            }
        },
        "ApiGatewayApiKey": {
            "Type": "AWS::ApiGateway::ApiKey",
            "DependsOn": ["ApiGatewayDeployment", "ApiGatewayRestApi", "ApiGatewayProdStage"],
            "Properties": {
              "Name": "BasicUser",
              "Description": "The api key for a basic user.",
              "Enabled": "true",
              "StageKeys": [{
                "RestApiId": { "Ref": "ApiGatewayRestApi" },
                "StageName": "prod"
              }]
            }
        },
        "ApiGatewayUsagePlanKey": {
            "Type" : "AWS::ApiGateway::UsagePlanKey",
            "Properties" : {
              "KeyId" : {"Ref": "ApiGatewayApiKey"},
              "KeyType" : "API_KEY",
              "UsagePlanId" : {"Ref": "ApiGatewayUsagePlan"}
            },
            "DependsOn": ["ApiGatewayApiKey", "ApiGatewayUsagePlan"]
        },
        "ApiGatewayUsagePlan": {
            "Type" : "AWS::ApiGateway::UsagePlan",
            "Properties" : {
              "ApiStages" : [ {"ApiId" : { "Ref" : "ApiGatewayRestApi" }, "Stage" : "prod"}],
              "Description" : "The basic usage plan.",
              "Quota" : {
                "Limit" : 5000,
                "Period" : "MONTH"
              },
              "Throttle" : {
                "BurstLimit" : 200,
                "RateLimit" : 100
              },
              "UsagePlanName" : "Basic"
            },
            "DependsOn": ["ApiGatewayProdStage"]
        },                
        "LambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "Action": "lambda:invokeFunction",
              "FunctionName": {"Fn::GetAtt": ["LambdaFunction", "Arn"]},
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {"Fn::Join": ["", ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "ApiGatewayRestApi"}, "/*"]]}
            }
        },
        "LambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": { "Ref": "S3Bucket"},
              "S3Key": "lambda_function.zip"
            },
            "Handler": "lambda_function.lambda_handler",
            "Role": {
                "Fn::GetAtt": ["LambdaCloudWatchLogsRole", "Arn"]
            },
            "Runtime": "python3.6",
            "FunctionName": "AutomationForThePeopleLambda",
            "MemorySize": 128,
            "Timeout": 5,
            "Description": "A Lambda function triggered by API Gateway that returns the current datetime in Unix timestamp format."
          },
          "DependsOn" : "LambdaCloudWatchLogsRole"
        }
    },
    "Outputs": {
        "ApiGatewayUrl": {
          "Description": "The URL of the API gateway.",
          "Value": {"Fn::Join": ["", ["https://", {"Ref": "ApiGatewayRestApi"}, ".execute-api.", {"Ref": "AWS::Region"}, ".amazonaws.com"]]}
        },
        "ApiId": {
            "Description": "The api key.",
            "Value": {"Ref": "ApiGatewayApiKey"}
        }
    }
}